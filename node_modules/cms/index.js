/**
 * Created by 松松 on 13-11-3.
 */

var fs = require('fs')
var path = require('path')
var app = require('app')
var helper = require('helper')
var template = require('template')

exports.cache = Object.create(null)

//缓存在内存中存活的阈值
exports.ExpiresTs = 3600000

var mimeTypeMap = {
    'html': 'text/html;charset=utf-8',
    'js': 'application/javascript;charset=utf-8',
    css: 'text/css;charset=utf-8'
}

app.get(/^\/go\/(.+)/, function (req, res) {
    var url = req.params && req.params[0] ? req.params[0] : false
    exports.readPage(url, function (str) {
        var mime = mimeTypeMap[req.query.format]
        if (!mime) mime = mimeTypeMap['html']
        res.header('content-type', mime)
        res.end(str)
    })
})

exports.readPage = function (page_url, callBack) {
    if (!page_url) {
        callBack('Not Found!')
        return
    }

    //暂时禁用所有缓存
    if (exports.cache[page_url] && false) {
        try {
            console.log('成功读取缓存，开始eval' + page_url)
            var s = Date.now()
            callBack(template.render(exports.cache[page_url].source, {}))
            console.log('eval成功，eval时间为：' + (Date.now() - s) + 'ms')
        } catch (e) {
            console.log('eval失败：' + page_url)
            callBack('Error:' + e)
        }
        //更新时间戳
        exports.cache[page_url].ts = Date.now()
    } else {
        var filePath = path.join(helper.staticBaseDir, page_url + '.jstpl')
        fs.readFile(filePath, function (err, buffer) {
            if (err) {
                callBack('Not Found')
                return
            }
            try {
                console.log('读取磁盘文件成功，开始eval' + page_url)
                var s = Date.now()
                callBack(template.render(buffer.toString(), {}))
                console.log('eval成功，eval时间为：' + (Date.now() - s) + 'ms')
            } catch (e) {
                callBack('Error:' + e)
            }
            exports.cache[page_url] = Object.create(null)
            exports.cache[page_url].source = buffer.toString()
            exports.cache[page_url].ts = Date.now()
            //将内存中超过maxExpiresTs阈值的缓存清除掉
            exports.clearMemory()
        })
    }
}

//通过删除缓存，达到更新的目的
exports.update = function (page_url) {
    if (exports.cache[page_url]) {
        delete exports.cache[page_url]
        console.log('更新了' + page_url + '的缓存')
    }
}

//将访问量少的页面，从内存中移除
exports.clearMemory = function () {
    Object.keys(exports.cache).forEach(function (item) {
        if (Date.now() - exports.cache[item].ts > exports.ExpiresTs) {
            delete exports.cache[item]
        }
    })
}
